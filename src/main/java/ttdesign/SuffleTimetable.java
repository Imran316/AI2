/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ttdesign;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import FireData.Firedata;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import ttInfo.Timetable;
import ttInfo.TimetableBatches;

import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.*;
import java.util.concurrent.ExecutionException;

/**
 *
 * @author imran
 */
public class SuffleTimetable extends javax.swing.JFrame {
    Timetable timetable;
    TimetableBatches timetableBatches;
    DefaultTableModel model, model1, model2, model_batch, model1_batch, model2_batch;
    ArrayList<String> seTime, sePrac, seSubProf, seLabProf,timeData;
    Firedata firedata;
    int row, coll, row1, coll1,c1,c;
    String sub1, sub2, temp;

    /**
     * Creates new form SuffleTimetable
     */
    public SuffleTimetable() {
        try {
            firedata = new Firedata();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        sePrac=new ArrayList<>();
        seTime = new ArrayList<>();
        seSubProf  = new ArrayList<>();
        seLabProf  = new ArrayList<>();
        timeData  = new ArrayList<>();


        initComponents();
        this.setLocationRelativeTo(null);
        model=(DefaultTableModel)jTableSE_COMP.getModel();
        model1=(DefaultTableModel)jTableTE_COMP.getModel();
        model2=(DefaultTableModel)jTableBE_COMP.getModel();
        model_batch=(DefaultTableModel)jTableSE_BATCH.getModel();
        model1_batch=(DefaultTableModel)jTableTE_BATCH.getModel();
        model2_batch=(DefaultTableModel)jTableBE_BATCH.getModel();
        ((DefaultTableCellRenderer)jTableBE_COMP.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(0);
        ((DefaultTableCellRenderer)jTableSE_COMP.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(0);
        ((DefaultTableCellRenderer)jTableSE_BATCH.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(0);
        ((DefaultTableCellRenderer)jTableTE_BATCH.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(0);
        ((DefaultTableCellRenderer)jTableBE_BATCH.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelClose = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelMin = new javax.swing.JLabel();
        jButtonBack = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButtonShuffle = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSE_COMP = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableTE_COMP = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableBE_COMP = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableTE_BATCH = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableBE_BATCH = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableSE_BATCH = new javax.swing.JTable();
        jButtonPUBLISH = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(248, 148, 6));

        jLabelClose.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        jLabelClose.setForeground(new java.awt.Color(255, 255, 255));
        jLabelClose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelClose.setText("x");
        jLabelClose.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jLabelClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelCloseMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Serif", 1, 17)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("GENERATE TIMETABLE");
        jLabel2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabelMin.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        jLabelMin.setForeground(new java.awt.Color(255, 255, 255));
        jLabelMin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelMin.setText("-");
        jLabelMin.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jLabelMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelMinMouseClicked(evt);
            }
        });

        jButtonBack.setBackground(new java.awt.Color(34, 167, 240));
        jButtonBack.setText("<-");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelMin, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelClose, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabelClose)
                                        .addComponent(jLabelMin))
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(44, 62, 80));
        jPanel2.setPreferredSize(new java.awt.Dimension(0, 250));

        jButtonShuffle.setBackground(new java.awt.Color(34, 167, 240));
        jButtonShuffle.setText("GENERATE");
        jButtonShuffle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShuffleActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("DialogInput", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(236, 240, 241));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("SE COMP:");

        jTableSE_COMP.setBackground(new java.awt.Color(44, 62, 80));
        jTableSE_COMP.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jTableSE_COMP.setForeground(new java.awt.Color(236, 240, 241));
        jTableSE_COMP.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        " 10.15 - 11.15", "11.15 - 12.15", "12.15 - 1.15", "BREAK", "1.45 - 2.45", "2.45 - 3.45", "3.45 - 4.45", "4.45 - 5.45"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSE_COMP.setRowHeight(25);
        jTableSE_COMP.setRowMargin(3);

        jScrollPane1.setViewportView(jTableSE_COMP);
        if (jTableSE_COMP.getColumnModel().getColumnCount() > 0) {
            jTableSE_COMP.getColumnModel().getColumn(0).setHeaderValue(" 10.15 - 11.15");
            jTableSE_COMP.getColumnModel().getColumn(2).setHeaderValue("12.15 - 1.15");
            jTableSE_COMP.getColumnModel().getColumn(4).setHeaderValue("1.45 - 2.45");
            jTableSE_COMP.getColumnModel().getColumn(6).setResizable(false);
            jTableSE_COMP.getColumnModel().getColumn(6).setHeaderValue("3.45 - 4.45");
        }

        jLabel5.setFont(new java.awt.Font("DialogInput", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(236, 240, 241));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("TE COMP:");

        jTableTE_COMP.setBackground(new java.awt.Color(44, 62, 80));
        jTableTE_COMP.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jTableTE_COMP.setForeground(new java.awt.Color(236, 240, 241));
        jTableTE_COMP.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "10.15 - 11.15", "11.15 - 12.15", "12.15 - 1.15", "BREAK", "1.45 - 2.45", "2.45 - 3.45", "3.45 - 4.45", "4.45 - 5.45"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableTE_COMP.setRowHeight(25);
        jTableTE_COMP.setRowMargin(3);
        jScrollPane2.setViewportView(jTableTE_COMP);
        ((DefaultTableCellRenderer)jTableTE_COMP.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(0);

        jLabel6.setFont(new java.awt.Font("DialogInput", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(236, 240, 241));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("BE COMP:");

        jTableBE_COMP.setBackground(new java.awt.Color(44, 62, 80));
        jTableBE_COMP.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jTableBE_COMP.setForeground(new java.awt.Color(236, 240, 241));
        jTableBE_COMP.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "10.15 - 11.15", "11.15 - 12.15", "12.15 - 1.15", "BREAK", "1.45 - 2.45", "2.45 - 3.45", "3.45 - 4.45", "4.45 - 5.45"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableBE_COMP.setRowHeight(25);
        jTableBE_COMP.setRowMargin(3);
        jScrollPane3.setViewportView(jTableBE_COMP);

        jTableTE_BATCH.setBackground(new java.awt.Color(44, 62, 80));
        jTableTE_BATCH.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jTableTE_BATCH.setForeground(new java.awt.Color(236, 240, 241));
        jTableTE_BATCH.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "T1", "T2", "T3", "T4"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableTE_BATCH.setRowHeight(25);
        jTableTE_BATCH.setRowMargin(3);
        jTableTE_BATCH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableTE_BATCHMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTableTE_BATCH);

        jTableBE_BATCH.setBackground(new java.awt.Color(44, 62, 80));
        jTableBE_BATCH.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jTableBE_BATCH.setForeground(new java.awt.Color(236, 240, 241));
        jTableBE_BATCH.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "B1", "B2", "B3", "B4"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableBE_BATCH.setRowHeight(25);
        jTableBE_BATCH.setRowMargin(3);
        jTableBE_BATCH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBE_BATCHMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTableBE_BATCH);

        jTableSE_BATCH.setBackground(new java.awt.Color(44, 62, 80));
        jTableSE_BATCH.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jTableSE_BATCH.setForeground(new java.awt.Color(236, 240, 241));
        jTableSE_BATCH.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "S1", "S2", "S3", "S4"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSE_BATCH.setRowHeight(25);
        jTableSE_BATCH.setRowMargin(3);
        jTableSE_BATCH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSE_BATCHMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jTableSE_BATCH);

        jButtonPUBLISH.setBackground(new java.awt.Color(34, 167, 240));
        jButtonPUBLISH.setText("PUBLISH");
        jButtonPUBLISH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPUBLISHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addGap(31, 31, 31)
                                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(jLabel5)
                                                                .addComponent(jLabel6))))
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addGap(60, 60, 60)
                                                        .addComponent(jLabel4))
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addGap(29, 29, 29)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(706, 706, 706)
                                .addComponent(jButtonShuffle, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonPUBLISH, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jButtonShuffle, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(20, 20, 20)
                                                .addComponent(jButtonPUBLISH, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(28, 28, 28)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(64, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1500, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 854, Short.MAX_VALUE))
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jTableSE_COMP.setRowSelectionAllowed(false);
        jTableSE_COMP.setColumnSelectionAllowed(false);
        jTableSE_COMP.setCellSelectionEnabled(true);
        jTableSE_COMP.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableSE_COMPMousePressed(evt);
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableSE_COMPMouseReleased(evt);
            }
        });

        jTableTE_COMP.setRowSelectionAllowed(false);
        jTableTE_COMP.setColumnSelectionAllowed(false);
        jTableTE_COMP.setCellSelectionEnabled(true);
        jTableTE_COMP.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableTE_COMPMousePressed(evt);
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableTE_COMPMouseReleased(evt);
            }
        });

        jTableBE_COMP.setRowSelectionAllowed(false);
        jTableBE_COMP.setColumnSelectionAllowed(false);
        jTableBE_COMP.setCellSelectionEnabled(true);
        jTableBE_COMP.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableBE_COMPMousePressed(evt);
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableBE_COMPMouseReleased(evt);
            }
        });



        pack();
    }// </editor-fold>

    private void jLabelCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabelCloseMouseClicked

    private void jLabelMinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMinMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabelMinMouseClicked

    private void jTableSE_COMPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSE_COMPMouseClicked
        sub1 = (String)jTableSE_COMP.getValueAt(jTableSE_COMP.rowAtPoint(evt.getPoint()), jTableSE_COMP.columnAtPoint(evt.getPoint()));
        row = jTableSE_COMP.rowAtPoint(evt.getPoint());
        coll = jTableSE_COMP.columnAtPoint(evt.getPoint());c=coll;
        if(coll>3)
            c=coll-1;
        timetable.getData().getYears().get(0).getProfessors().forEach(x->{
            if(x.getSub_lectures().contains(sub1)){

            }
        });

    }
    private void jTableSE_COMPMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSE_COMPMouseClicked
        sub2 = (String)jTableSE_COMP.getValueAt(jTableSE_COMP.rowAtPoint(evt.getPoint()), jTableSE_COMP.columnAtPoint(evt.getPoint()));
        row1 = jTableSE_COMP.rowAtPoint(evt.getPoint());
        coll1 = jTableSE_COMP.columnAtPoint(evt.getPoint());c1=coll1;
        if(coll1>3)
            c1=coll1-1;
        timetable.getData().getYears().get(0).getProfessors().forEach(x->{
            if(x.getSub_lectures().contains(sub2)){
                if(!x.getIsBusy(row,c)) {
                    if(sub1.equals("Free")){
                        x.setIsBusy(row1,c1, false);
                        x.setPersonal(row1,c1, "--");
                        x.setIsBusy(row, c, true);
                        x.setPersonal(row, c, sub2);
                        model.setValueAt(sub1, jTableSE_COMP.rowAtPoint(evt.getPoint()), jTableSE_COMP.columnAtPoint(evt.getPoint()));
                        model.setValueAt(sub2, row, coll);
                    }
                    timetable.getData().getYears().get(0).getProfessors().forEach(m->{
                        if(m.getSub_lectures().contains(sub1)){
                            if(!m.getIsBusy(row1,c1)) {
                                m.setIsBusy(row, c, false);
                                m.setPersonal(row, c, "--");
                                m.setIsBusy(row1, c1, true);
                                m.setPersonal(row1, c1, sub1);

                                x.setIsBusy(row1,c1, false);
                                x.setPersonal(row1,c1, "--");
                                x.setIsBusy(row, c, true);
                                x.setPersonal(row, c, sub2);
                                model.setValueAt(sub1, jTableSE_COMP.rowAtPoint(evt.getPoint()), jTableSE_COMP.columnAtPoint(evt.getPoint()));
                                model.setValueAt(sub2, row, coll);
                            }
                            else
                                JOptionPane.showMessageDialog(this,"Cannot be Done due "+sub1);
                        }
                    });


                }
                else
                    JOptionPane.showMessageDialog(this,"Cannot be Done due "+sub2);
            }
        });

    }

    private void jTableTE_COMPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSE_COMPMouseClicked
        sub1 = (String)jTableTE_COMP.getValueAt(jTableTE_COMP.rowAtPoint(evt.getPoint()), jTableTE_COMP.columnAtPoint(evt.getPoint()));
        row = jTableTE_COMP.rowAtPoint(evt.getPoint());
        coll = jTableTE_COMP.columnAtPoint(evt.getPoint());c=coll;
        if(coll>3)
            c=coll-1;
        timetable.getData().getYears().get(1).getProfessors().forEach(x->{
            if(x.getSub_lectures().contains(sub1)){

            }
        });

    }
    private void jTableTE_COMPMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSE_COMPMouseClicked
        sub2 = (String)jTableTE_COMP.getValueAt(jTableTE_COMP.rowAtPoint(evt.getPoint()), jTableTE_COMP.columnAtPoint(evt.getPoint()));
        row1 = jTableTE_COMP.rowAtPoint(evt.getPoint());
        coll1 = jTableTE_COMP.columnAtPoint(evt.getPoint());c1=coll1;
        if(coll1>3)
            c1=coll1-1;
        timetable.getData().getYears().get(1).getProfessors().forEach(x->{
            if(x.getSub_lectures().contains(sub2)){
                    if(!x.getIsBusy(row,c)) {
                        if(sub1.equals("Free")){
                            x.setIsBusy(row1,c1, false);
                            x.setPersonal(row1,c1, "--");
                            x.setIsBusy(row, c, true);
                            x.setPersonal(row, c, sub2);
                            model1.setValueAt(sub1, jTableTE_COMP.rowAtPoint(evt.getPoint()), jTableTE_COMP.columnAtPoint(evt.getPoint()));
                            model1.setValueAt(sub2, row, coll);
                        }
                        timetable.getData().getYears().get(1).getProfessors().forEach(m->{
                            if(m.getSub_lectures().contains(sub1)){
                                if(!m.getIsBusy(row1,c1)) {
                                    m.setIsBusy(row, c, false);
                                    m.setPersonal(row, c, "--");
                                    m.setIsBusy(row1, c1, true);
                                    m.setPersonal(row1, c1, sub1);

                                    x.setIsBusy(row1,c1, false);
                                    x.setPersonal(row1,c1, "--");
                                    x.setIsBusy(row, c, true);
                                    x.setPersonal(row, c, sub2);
                                    model1.setValueAt(sub1, jTableTE_COMP.rowAtPoint(evt.getPoint()), jTableTE_COMP.columnAtPoint(evt.getPoint()));
                                    model1.setValueAt(sub2, row, coll);
                                }
                                else
                                    JOptionPane.showMessageDialog(this,"Cannot be Done due "+sub1);
                            }
                        });


                    }
                    else
                        JOptionPane.showMessageDialog(this,"Cannot be Done due "+sub2);
            }
        });

    }

    private void jTableBE_COMPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSE_COMPMouseClicked
        sub1 = (String)jTableBE_COMP.getValueAt(jTableBE_COMP.rowAtPoint(evt.getPoint()), jTableBE_COMP.columnAtPoint(evt.getPoint()));
        row = jTableBE_COMP.rowAtPoint(evt.getPoint());
        coll = jTableBE_COMP.columnAtPoint(evt.getPoint());c=coll;
        if(coll>3)
            c=coll-1;
        timetable.getData().getYears().get(2).getProfessors().forEach(x->{
            if(x.getSub_lectures().contains(sub1)){

            }
        });

    }
    private void jTableBE_COMPMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSE_COMPMouseClicked
        sub2 = (String)jTableBE_COMP.getValueAt(jTableBE_COMP.rowAtPoint(evt.getPoint()), jTableBE_COMP.columnAtPoint(evt.getPoint()));
        row1 = jTableBE_COMP.rowAtPoint(evt.getPoint());
        coll1 = jTableBE_COMP.columnAtPoint(evt.getPoint());c1=coll1;
        if(coll1>3)
            c1=coll1-1;
        timetable.getData().getYears().get(2).getProfessors().forEach(x->{
            if(x.getSub_lectures().contains(sub2)){
                if(!x.getIsBusy(row,c)) {
                    if(sub1.equals("Free")){
                        x.setIsBusy(row1,c1, false);
                        x.setPersonal(row1,c1, "--");
                        x.setIsBusy(row, c, true);
                        x.setPersonal(row, c, sub2);
                        model2.setValueAt(sub1, jTableBE_COMP.rowAtPoint(evt.getPoint()), jTableBE_COMP.columnAtPoint(evt.getPoint()));
                        model2.setValueAt(sub2, row, coll);
                    }
                    timetable.getData().getYears().get(2).getProfessors().forEach(m->{
                        if(m.getSub_lectures().contains(sub1)){
                            if(!m.getIsBusy(row1,c1)) {
                                m.setIsBusy(row, c, false);
                                m.setPersonal(row, c, "--");
                                m.setIsBusy(row1, c1, true);
                                m.setPersonal(row1, c1, sub1);

                                x.setIsBusy(row1,c1, false);
                                x.setPersonal(row1,c1, "--");
                                x.setIsBusy(row, c, true);
                                x.setPersonal(row, c, sub2);
                                model2.setValueAt(sub1, jTableBE_COMP.rowAtPoint(evt.getPoint()), jTableBE_COMP.columnAtPoint(evt.getPoint()));
                                model2.setValueAt(sub2, row, coll);
                            }
                            else
                                JOptionPane.showMessageDialog(this,"Cannot be Done due "+sub1);
                        }
                    });


                }
                else
                    JOptionPane.showMessageDialog(this,"Cannot be Done due "+sub2);
            }
        });

    }

    private void jButtonShuffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShuffleActionPerformed
        timetable = new Timetable();
        timetableBatches = new TimetableBatches();
        
        if(model.getRowCount()>0){
            model.setRowCount(0);
            model1.setRowCount(0);
            model2.setRowCount(0);
            model_batch.setRowCount(0);
            model1_batch.setRowCount(0);
            model2_batch.setRowCount(0);
        }
        
        for(int i=0; i<5; i++){


            String lec1=timetable.getData().getYears().get(0).getTime(i, 0);
            String lec2=timetable.getData().getYears().get(0).getTime(i, 1);
            String lec3=timetable.getData().getYears().get(0).getTime(i, 2);
            String lec4=timetable.getData().getYears().get(0).getTime(i, 3);
            String lec5=timetable.getData().getYears().get(0).getTime(i, 4);
            String lec6=timetable.getData().getYears().get(0).getTime(i, 5);
            String lec7=timetable.getData().getYears().get(0).getTime(i, 6);

            
            String pra1=timetableBatches.getData().getBatches().get(0).getTime(i, 0);
            String pra2=timetableBatches.getData().getBatches().get(0).getTime(i, 1);
            String pra3=timetableBatches.getData().getBatches().get(0).getTime(i, 2);
            String pra4=timetableBatches.getData().getBatches().get(0).getTime(i, 3);
            model.insertRow(model.getRowCount(), new String[]{lec1,lec2,lec3,"BREAK",lec4,lec5,lec6,lec7});

            model_batch.insertRow(model_batch.getRowCount(), new String[]{pra1, pra2, pra3, pra4});
        }
        
        for(int i=0; i<5; i++){
            String lec1=timetable.getData().getYears().get(1).getTime(i, 0);
            String lec2=timetable.getData().getYears().get(1).getTime(i, 1);
            String lec3=timetable.getData().getYears().get(1).getTime(i, 2);
            String lec4=timetable.getData().getYears().get(1).getTime(i, 3);
            String lec5=timetable.getData().getYears().get(1).getTime(i, 4);
            String lec6=timetable.getData().getYears().get(1).getTime(i, 5);
            String lec7=timetable.getData().getYears().get(1).getTime(i, 6);
            
            String pra1=timetableBatches.getData().getBatches().get(1).getTime(i, 0);
            String pra2=timetableBatches.getData().getBatches().get(1).getTime(i, 1);
            String pra3=timetableBatches.getData().getBatches().get(1).getTime(i, 2);
            String pra4=timetableBatches.getData().getBatches().get(1).getTime(i, 3);
         
            model1.insertRow(model1.getRowCount(), new String[]{lec1,lec2,lec3,"BREAK",lec4,lec5,lec6,lec7});
            model1_batch.insertRow(model1_batch.getRowCount(), new String[]{pra1, pra2, pra3, pra4});
        }
        
        for(int i=0; i<5; i++){
            String lec1=timetable.getData().getYears().get(2).getTime(i, 0);
            String lec2=timetable.getData().getYears().get(2).getTime(i, 1);
            String lec3=timetable.getData().getYears().get(2).getTime(i, 2);
            String lec4=timetable.getData().getYears().get(2).getTime(i, 3);
            String lec5=timetable.getData().getYears().get(2).getTime(i, 4);
            String lec6=timetable.getData().getYears().get(2).getTime(i, 5);
            String lec7=timetable.getData().getYears().get(2).getTime(i, 6);
            
            String pra1=timetableBatches.getData().getBatches().get(2).getTime(i, 0);
            String pra2=timetableBatches.getData().getBatches().get(2).getTime(i, 1);
            String pra3=timetableBatches.getData().getBatches().get(2).getTime(i, 2);
            String pra4=timetableBatches.getData().getBatches().get(2).getTime(i, 3);
         
            model2.insertRow(model2.getRowCount(), new String[]{lec1,lec2,lec3,"BREAK",lec4,lec5,lec6,lec7});
            model2_batch.insertRow(model2_batch.getRowCount(), new String[]{pra1, pra2, pra3, pra4});
        }

        try {
            writeDatatoExcel();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButtonShuffleActionPerformed

    private void jTableTE_BATCHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTE_BATCHMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableTE_BATCHMouseClicked

    private void jTableBE_BATCHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBE_BATCHMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableBE_BATCHMouseClicked

    private void jTableSE_BATCHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSE_BATCHMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableSE_BATCHMouseClicked

    private void jButtonPUBLISHActionPerformed(java.awt.event.ActionEvent evt) {

        for(int i=0;i<5;i++) {
            seSubProf = new ArrayList<>();
            seLabProf = new ArrayList<>();
            final String lec1 = (String) model.getValueAt(i, 0);
            final String lec2 = (String) model.getValueAt(i, 1);
            final String lec3 = (String) model.getValueAt(i, 2);
            final String lec4 = (String) model.getValueAt(i, 3);
            final String lec5 = (String) model.getValueAt(i, 4);
            final String lec6 = (String) model.getValueAt(i, 5);
            final String lec7 = (String) model.getValueAt(i, 6);
            final String lec8 = (String) model.getValueAt(i, 7);

            final String pra1 = (String) model_batch.getValueAt(i, 0);
            final String pra2 = (String) model_batch.getValueAt(i, 1);
            final String pra3 = (String) model_batch.getValueAt(i, 2);
            final String pra4 = (String) model_batch.getValueAt(i, 3);

            if (lec1.equals("Free")) {
                seSubProf.add("Free");
            } else{
                timetable.getData().getYears().get(0).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(0).equals(lec1)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }
            if(lec2.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(0).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(0).equals(lec2)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }
            if(lec3.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(0).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(0).equals(lec3)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }
            seSubProf.add(lec4);
            if(lec5.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(0).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(0).equals(lec5)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }
            if(lec6.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(0).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(0).equals(lec6)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }
            seSubProf.add("Lab!");
            seSubProf.add("Lab!");
            /*timetable.getData().getYears().get(0).getProfessors().forEach(m->{
                if(lec7.equals("Lab!")){
                    seSubProf.add("Lab!");
                }
                else if(m.getSub_lectures().get(0).equals(lec7)){
                    seSubProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(0).getProfessors().forEach(m->{
                if(lec8.equals("Lab!")){
                    seSubProf.add("Lab!");
                }
                else if(m.getSub_lectures().get(0).equals(lec8)){
                    seSubProf.add(m.getProfName());
                }
            });*/


            timetable.getData().getYears().get(0).getPracticals().forEach(m->{
                if(m.getPrac_lectures().get(0).equals(pra1)){
                    seLabProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(0).getPracticals().forEach(m->{
                if(m.getPrac_lectures().get(0).equals(pra2)){
                    seLabProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(0).getPracticals().forEach(m->{
                if(m.getPrac_lectures().get(0).equals(pra3)){
                    seLabProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(0).getPracticals().forEach(m->{
                if(m.getPrac_lectures().get(0).equals(pra4)){
                    seLabProf.add(m.getProfName());
                }
            });


            seTime = new ArrayList<String>(Arrays.asList(lec1, lec2, lec3, lec4, lec5, lec6, lec7, lec8));
            sePrac = new ArrayList<String>(Arrays.asList(pra1, pra2, pra3, pra4));



            try {
                firedata.addSETimetable(String.valueOf(i), seTime, sePrac, seSubProf,seLabProf);
            } catch (Exception e) {
                e.printStackTrace();
            }

            seSubProf = new ArrayList<>();
            seLabProf = new ArrayList<>();

            final String lec11 = (String) model1.getValueAt(i, 0);
            final String lec12 = (String) model1.getValueAt(i, 1);
            final String lec13 = (String) model1.getValueAt(i, 2);
            final String lec14 = (String) model1.getValueAt(i, 3);
            final String lec15 = (String) model1.getValueAt(i, 4);
            final String lec16 = (String) model1.getValueAt(i, 5);
            final String lec17 = (String) model1.getValueAt(i, 6);
            final String lec18 = (String) model1.getValueAt(i, 7);

            final String pra11 = (String) model1_batch.getValueAt(i, 0);
            final String pra12 = (String) model1_batch.getValueAt(i, 1);
            final String pra13 = (String) model1_batch.getValueAt(i, 2);
            final String pra14 = (String) model1_batch.getValueAt(i, 3);

            seTime = new ArrayList<String>(Arrays.asList(lec11, lec12, lec13, lec14, lec15, lec16, lec17, lec18));
            sePrac = new ArrayList<String>(Arrays.asList(pra11, pra12, pra13, pra14));
            if(lec11.equals("Free")){
                seSubProf.add("Free");
            }else {
                timetable.getData().getYears().get(1).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(1).equals(lec11)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }

            if(lec12.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(1).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(1).equals(lec12)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }

            if(lec13.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(1).getProfessors().forEach(m -> {
                     if (m.getSub_lectures().get(1).equals(lec13)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }

            seSubProf.add(lec14);

            /*timetable.getData().getYears().get(1).getProfessors().forEach(m->{
                if(lec15.equals("Lab!")){
                    seSubProf.add("Lab!");
                }
                else if(m.getSub_lectures().get(1).equals(lec15)){
                    seSubProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(1).getProfessors().forEach(m->{
                if(lec16.equals("Lab!")){
                    seSubProf.add("Lab!");
                }
                else if(m.getSub_lectures().get(1).equals(lec16)){
                    seSubProf.add(m.getProfName());
                }
            });*/
            seSubProf.add("Lab!");
            seSubProf.add("Lab!");

            if(lec17.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(1).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(1).equals(lec17)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }

            if(lec18.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(1).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(1).equals(lec18)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }


            timetable.getData().getYears().get(1).getPracticals().forEach(m->{
                if(m.getPrac_lectures().get(1).equals(pra11)){
                    seLabProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(1).getPracticals().forEach(m->{
                if(m.getPrac_lectures().get(1).equals(pra12)){
                    seLabProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(1).getPracticals().forEach(m->{
                if (m.getPrac_lectures().get(1).equals(pra13)){
                    seLabProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(1).getPracticals().forEach(m->{
                if(m.getPrac_lectures().get(1).equals(pra14)){
                    seLabProf.add(m.getProfName());
                }
            });



            try {
                firedata.addTETimetable(String.valueOf(i), seTime, sePrac, seSubProf,seLabProf);
            } catch (Exception e) {
                e.printStackTrace();
            }


            seSubProf = new ArrayList<>();
            seLabProf = new ArrayList<>();


            final String lec21 = (String) model2.getValueAt(i, 0);
            final String lec22 = (String) model2.getValueAt(i, 1);
            final String lec23 = (String) model2.getValueAt(i, 2);
            final String lec24 = (String) model2.getValueAt(i, 3);
            final String lec25 = (String) model2.getValueAt(i, 4);
            final String lec26 = (String) model2.getValueAt(i, 5);
            final String lec27 = (String) model2.getValueAt(i, 6);
            final String lec28 = (String) model2.getValueAt(i, 7);

            final String pra21 = (String) model2_batch.getValueAt(i, 0);
            final String pra22 = (String) model2_batch.getValueAt(i, 1);
            final String pra23 = (String) model2_batch.getValueAt(i, 2);
            final String pra24 = (String) model2_batch.getValueAt(i, 3);

            if(lec21.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(2).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(2).equals(lec21)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }

            seSubProf.add("Lab!");
            seSubProf.add("Lab!");

            /*timetable.getData().getYears().get(2).getProfessors().forEach(m->{
                if(lec22.equals("Lab!")){
                    seSubProf.add("Lab!");
                }
                else if(m.getSub_lectures().get(2).equals(lec22)){
                    seSubProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(2).getProfessors().forEach(m->{
                if(lec23.equals("Lab!")){
                    seSubProf.add("Lab!");
                }
                else if(m.getSub_lectures().get(2).equals(lec23)){
                    seSubProf.add(m.getProfName());
                }
            });*/
            seSubProf.add(lec24);
            if(lec25.equals("Free")){
                seSubProf.add("Free");
            }
            else{
                timetable.getData().getYears().get(2).getProfessors().forEach(m->{
                if(m.getSub_lectures().get(2).equals(lec25)){
                    seSubProf.add(m.getProfName());
                }
            });
            }
            if(lec26.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(2).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(2).equals(lec26)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }
            if(lec27.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(2).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(2).equals(lec27)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }
            if(lec28.equals("Free")){
                seSubProf.add("Free");
            }
            else {
                timetable.getData().getYears().get(2).getProfessors().forEach(m -> {
                    if (m.getSub_lectures().get(2).equals(lec28)) {
                        seSubProf.add(m.getProfName());
                    }
                });
            }

            timetable.getData().getYears().get(2).getPracticals().forEach(m->{
                if(m.getPrac_lectures().get(2).equals(pra21)){
                    seLabProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(2).getPracticals().forEach(m->{
                if(m.getPrac_lectures().get(2).equals(pra22)){
                    seLabProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(2).getPracticals().forEach(m->{
                if(m.getPrac_lectures().get(2).equals(pra23)){
                    seLabProf.add(m.getProfName());
                }
            });
            timetable.getData().getYears().get(2).getPracticals().forEach(m->{
                 if(m.getPrac_lectures().get(2).equals(pra24)){
                    seLabProf.add(m.getProfName());
                }
            });


            seTime = new ArrayList<String>(Arrays.asList(lec21, lec22, lec23, lec24, lec25, lec26, lec27, lec28));
            sePrac = new ArrayList<String>(Arrays.asList(pra21, pra22, pra23, pra24));

            try {
                firedata.addBETimetable(String.valueOf(i), seTime, sePrac, seSubProf,seLabProf);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }


        databaseProfessorTimetable();

    }

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {
        Home loginForm  =  new Home();
        loginForm.setVisible(true);
        loginForm.pack();
        loginForm.setLocationRelativeTo(null);
        loginForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }

    public void databaseProfessorTimetable(){

        for(int i=0; i<timetable.getData().getProfessors().size(); i++){
            for(int j=0; j<5; j++){
                String profName = timetable.getData().getProfessors().get(i).getProfName();
                timeData = new ArrayList<>();
                for(int k=0; k<7;k++){
                    if(k==3)
                        timeData.add("BREAK");

                    timeData.add(timetable.getData().getProfessors().get(i).getPersonal(j,k));
                    System.out.print(timetable.getData().getProfessors().get(i).getPersonal(j,k)+"   ");
                }
                System.out.println("");

                try {
                    firedata.addProfessorTimetable(profName, String.valueOf(j), timeData, null,null, null);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            System.out.println("");
            System.out.println("");
            System.out.println("");
        }
    }

    public void writeDatatoExcel() throws Exception {
        XSSFWorkbook workbook = new XSSFWorkbook();

        //Create a blank sheet
        XSSFSheet spreadsheet = workbook.createSheet( "Master");

        //Create row object
        XSSFRow row;

        //for(int i =0; i<3; i++){
            //This data needs to be written (Object[])
            Map< String, Object[] > empinfo = new TreeMap< String, Object[] >();
            empinfo.put( "1", new Object[] {
                    "SE COMP", });
            empinfo.put( "10", new Object[] {
                    "", "10:15-11:15", "11:15-12:15", "12:15-1:15", "1:15-1:45",
                    "1:45-2:45", "2:45-3:45", "3:45-4:45", "4:45-5:45","","","S1","S2","S3","S4" });

            empinfo.put( "11", new Object[] {
                    "Monday", model.getValueAt(0,0),model.getValueAt(0,1),model.getValueAt(0,2),model.getValueAt(0,3),
                    model.getValueAt(0,4),model.getValueAt(0,5),model.getValueAt(0,6),model.getValueAt(0,7),
            "","",model_batch.getValueAt(0,0),model_batch.getValueAt(0,1),model_batch.getValueAt(0,2),model_batch.getValueAt(0,3)});

            empinfo.put( "12", new Object[] {
                    "Tuesday", model.getValueAt(1,0),model.getValueAt(1,1),model.getValueAt(1,2),model.getValueAt(1,3),
                    model.getValueAt(1,4),model.getValueAt(1,5),model.getValueAt(1,6),model.getValueAt(1,7),
                    "","",model_batch.getValueAt(1,0),model_batch.getValueAt(1,1),model_batch.getValueAt(1,2),model_batch.getValueAt(1,3)});

            empinfo.put( "13", new Object[] {
                    "Wednesday", model.getValueAt(2,0),model.getValueAt(2,1),model.getValueAt(2,2),model.getValueAt(2,3),
                    model.getValueAt(2,4),model.getValueAt(2,5),model.getValueAt(2,6),model.getValueAt(2,7),
                    "","",model_batch.getValueAt(2,0),model_batch.getValueAt(2,1),model_batch.getValueAt(2,2),model_batch.getValueAt(2,3) });

            empinfo.put( "14", new Object[] {
                    "Thursday", model.getValueAt(3,0),model.getValueAt(3,1),model.getValueAt(3,2),model.getValueAt(3,3),
                    model.getValueAt(3,4),model.getValueAt(3,5),model.getValueAt(3,6),model.getValueAt(3,7),
                    "","",model_batch.getValueAt(3,0),model_batch.getValueAt(3,1),model_batch.getValueAt(3,2),model_batch.getValueAt(3,3) });

            empinfo.put( "15", new Object[] {
                    "Friday", model.getValueAt(4,0),model.getValueAt(4,1),model.getValueAt(4,2),model.getValueAt(4,3),
                    model.getValueAt(4,4),model.getValueAt(4,5),model.getValueAt(4,6),model.getValueAt(4,7),
                    "","",model_batch.getValueAt(4,0),model_batch.getValueAt(4,1),model_batch.getValueAt(4,2),model_batch.getValueAt(4,3) });
            empinfo.put( "16", new Object[] {
                    "", "", "" });
            empinfo.put( "17", new Object[] {
                    "", "", "" });
            empinfo.put( "18", new Object[] {
                    "", "", "" });

        empinfo.put( "19", new Object[] {
                "TE COMP", });
        empinfo.put( "2", new Object[] {
                "", "10:15-11:15", "11:15-12:15", "12:15-1:15", "1:15-1:45",
                "1:45-2:45", "2:45-3:45", "3:45-4:45", "4:45-5:45","","","T1","T2","T3","T4" });

        empinfo.put( "20", new Object[] {
                "Monday", model1.getValueAt(0,0),model1.getValueAt(0,1),model1.getValueAt(0,2),model1.getValueAt(0,3),
                model1.getValueAt(0,4),model1.getValueAt(0,5),model1.getValueAt(0,6),model1.getValueAt(0,7),
                "","",model1_batch.getValueAt(0,0),model1_batch.getValueAt(0,1),model1_batch.getValueAt(0,2),model1_batch.getValueAt(0,3)});

        empinfo.put( "21", new Object[] {
                "Tuesday", model1.getValueAt(1,0),model1.getValueAt(1,1),model1.getValueAt(1,2),model1.getValueAt(1,3),
                model1.getValueAt(1,4),model1.getValueAt(1,5),model1.getValueAt(1,6),model1.getValueAt(1,7),
                "","",model1_batch.getValueAt(1,0),model1_batch.getValueAt(1,1),model1_batch.getValueAt(1,2),model1_batch.getValueAt(1,3)});

        empinfo.put( "22", new Object[] {
                "Wednesday", model1.getValueAt(2,0),model1.getValueAt(2,1),model1.getValueAt(2,2),model1.getValueAt(2,3),
                model1.getValueAt(2,4),model1.getValueAt(2,5),model1.getValueAt(2,6),model1.getValueAt(2,7),
                "","",model1_batch.getValueAt(2,0),model1_batch.getValueAt(2,1),model1_batch.getValueAt(2,2),model1_batch.getValueAt(2,3) });

        empinfo.put( "23", new Object[] {
                "Thursday", model1.getValueAt(3,0),model1.getValueAt(3,1),model1.getValueAt(3,2),model1.getValueAt(3,3),
                model1.getValueAt(3,4),model1.getValueAt(3,5),model1.getValueAt(3,6),model1.getValueAt(3,7),
                "","",model1_batch.getValueAt(3,0),model1_batch.getValueAt(3,1),model1_batch.getValueAt(3,2),model1_batch.getValueAt(3,3) });

        empinfo.put( "24", new Object[] {
                "Friday", model1.getValueAt(4,0),model1.getValueAt(4,1),model1.getValueAt(4,2),model1.getValueAt(4,3),
                model1.getValueAt(4,4),model1.getValueAt(4,5),model1.getValueAt(4,6),model1.getValueAt(4,7),
                "","",model1_batch.getValueAt(4,0),model1_batch.getValueAt(4,1),model1_batch.getValueAt(4,2),model1_batch.getValueAt(4,3) });
        empinfo.put( "25", new Object[] {
                "", "", "" });
        empinfo.put( "26", new Object[] {
                "", "", "" });
        empinfo.put( "27", new Object[] {
                "", "", "" });


        empinfo.put( "28", new Object[] {
                "BE COMP", });
        empinfo.put( "29", new Object[] {
                "", "10:15-11:15", "11:15-12:15", "12:15-1:15", "1:15-1:45",
                "1:45-2:45", "2:45-3:45", "3:45-4:45", "4:45-5:45","","","B1","B2","B3","B4" });

        empinfo.put( "3", new Object[] {
                "Monday", model2.getValueAt(0,0),model2.getValueAt(0,1),model2.getValueAt(0,2),model2.getValueAt(0,3),
                model2.getValueAt(0,4),model2.getValueAt(0,5),model2.getValueAt(0,6),model2.getValueAt(0,7),
                "","",model2_batch.getValueAt(0,0),model2_batch.getValueAt(0,1),model2_batch.getValueAt(0,2),model2_batch.getValueAt(0,3)});

        empinfo.put( "4", new Object[] {
                "Tuesday", model2.getValueAt(1,0),model2.getValueAt(1,1),model2.getValueAt(1,2),model2.getValueAt(1,3),
                model2.getValueAt(1,4),model2.getValueAt(1,5),model2.getValueAt(1,6),model2.getValueAt(1,7),
                "","",model2_batch.getValueAt(1,0),model2_batch.getValueAt(1,1),model2_batch.getValueAt(1,2),model2_batch.getValueAt(1,3)});

        empinfo.put( "5", new Object[] {
                "Wednesday", model2.getValueAt(2,0),model2.getValueAt(2,1),model2.getValueAt(2,2),model2.getValueAt(2,3),
                model2.getValueAt(2,4),model2.getValueAt(2,5),model2.getValueAt(2,6),model2.getValueAt(2,7),
                "","",model2_batch.getValueAt(2,0),model2_batch.getValueAt(2,1),model2_batch.getValueAt(2,2),model2_batch.getValueAt(2,3) });

        empinfo.put( "6", new Object[] {
                "Thursday", model2.getValueAt(3,0),model2.getValueAt(3,1),model2.getValueAt(3,2),model2.getValueAt(3,3),
                model2.getValueAt(3,4),model2.getValueAt(3,5),model2.getValueAt(3,6),model2.getValueAt(3,7),
                "","",model2_batch.getValueAt(3,0),model2_batch.getValueAt(3,1),model2_batch.getValueAt(3,2),model2_batch.getValueAt(3,3) });

        empinfo.put( "7", new Object[] {
                "Friday", model2.getValueAt(4,0),model2.getValueAt(4,1),model2.getValueAt(4,2),model2.getValueAt(4,3),
                model2.getValueAt(4,4),model2.getValueAt(4,5),model2.getValueAt(4,6),model2.getValueAt(4,7),
                "","",model2_batch.getValueAt(4,0),model2_batch.getValueAt(4,1),model2_batch.getValueAt(4,2),model2_batch.getValueAt(4,3) });
        empinfo.put( "8", new Object[] {
                "", "", "" });
        empinfo.put( "9", new Object[] {
                "", "", "" });


            //Iterate over data and write to sheet
            Set< String > keyid = empinfo.keySet();
            int rowid = 0;

            for (String key : keyid) {
                row = spreadsheet.createRow(rowid++);
                Object [] objectArr = empinfo.get(key);
                int cellid = 0;

                for (Object obj : objectArr){
                    Cell cell = row.createCell(cellid++);
                    cell.setCellValue((String)obj);
                }
            }
       // }


        File file = new File("Timetable.xlsx");
        //Write the workbook in file system

        FileOutputStream out = new FileOutputStream(file);
        workbook.write(out);
        out.close();


        System.out.println("Timetable.xlsx written successfully");
        JOptionPane.showMessageDialog(this, "Timetable.xlsx written successfully");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SuffleTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SuffleTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SuffleTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SuffleTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SuffleTimetable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPUBLISH;
    private javax.swing.JButton jButtonShuffle;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JLabel jLabelMin;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTableBE_BATCH;
    private javax.swing.JTable jTableBE_COMP;
    private javax.swing.JTable jTableSE_BATCH;
    private javax.swing.JTable jTableSE_COMP;
    private javax.swing.JTable jTableTE_BATCH;
    private javax.swing.JTable jTableTE_COMP;
    // End of variables declaration//GEN-END:variables
}
